Verbos HTTP

GET -> Obtener la información del servidor.
POST -> Enviar información al servidor.
PUT -> Enviar información al servidor pero para actualizar (objeto completo).
        {
         "nombre": "azael",
         "apellidos": "garcia",
         "edad": 26
        }
PATCH -> Enviar información al servidor pero para actualizar (solo un atributo).
        Normalmente se usa en booleanos para cambiarlos
        {
         "nombre": "azael"
        }
DELETE -> Elimina información.

Son peticiones que hacemos al servidor.
_______________________________________________________________________________________________
Patrón de diseño MVC

M = Modelo -> Serían los esquemas de bases de datos. Nosotros creamos los modelos con Node y Express    
              definiendolos desde código y MongoDB ya crea las tablas en automático.
V = Vista -> La vista es el Frontend, usaremos React. Es la información que se pinta en la pantalla.
C = Controlador -> Es un intermediario entre el modelo y la vista. Es como un manejador de información.
________________________________________________________________________________________________
Mongoose es un ORM
O - Object
R - Relational
M - Mapping
Es una técnica que permite interactuar con la base de datos relacional y no relacional usando código orientado a objetos (métodos, funciones y clases). Convierte todo a un objeto. Traduce la estructura de una base datos. Las tablas, las filas, las columnas, etc. y los vuelve objetos.
________________________________________________________________________________________________
API también se le conoce como endpoint y hace referenecia a una URL.
API significa Interfaz de Programación de Aplicaciones
API es un conjunto de reglas y protocolos que permite a las aplicaciones comunicarse entre si. 
Las reglas son los verbos GET, POST, DELETE, PUT y PATCH.
Los protocolos son los http y https. El http no tiene un protocolo de certificado de seguridad. Es poco comun usar aplicaciones web sin el certificado. Por el momento se usa porque es local y se esta desarrollando.
Cuando las APIs ya están en internet, tiene que ser https si no el Frontend no las acepta. Es peligroso consumir http.

Ejemplo de URL de API: talkweb.com.mx/api/usuarios

La nuestra seria http://localhost:3000/api/usuarios
________________________________________________________________________________________________
En el archivo Usuario.js que es donde se declara, se le conoce como esquema
En el archivo usuariosController.js que es donde la base de datos ya existe, se le conoce como colecciones.
A las tablas se les conoce como colecciones.
Y a los registros se les conoce como documento.
________________________________________________________________________________________________
Autenticación
La dependencia jsonwebtoken es como un string cifrado con información. Ya esta instalada y se ve en el archivo package.json. Lo primero que se tiene que hacer es crear la autenticación, generar el Json Web Token. Primero autenticar y de ahi procesarlo. Se va a crear otro controlador, no será modelo.
Se creó el archivo authController.js en la carpeta controllers. 
A parte será la carpeta helpers. Los helpers son funciones utilitarias, son funciones que se pueden reutilizar para otras cosas. En este caso se usará para que genere el Json Web Token. Va a cifrar la información.